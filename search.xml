<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript权威指南</title>
      <link href="/2023/08/01/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
      <url>/2023/08/01/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript语言核心"><a href="#Javascript语言核心" class="headerlink" title="Javascript语言核心"></a>Javascript语言核心</h1><h2 id="2-词法结构"><a href="#2-词法结构" class="headerlink" title="2.词法结构"></a>2.词法结构</h2><h3 id="2-1字符集"><a href="#2-1字符集" class="headerlink" title="2.1字符集"></a>2.1字符集</h3><p>Javascript程序是由Unicode字符集编写的</p><h3 id="2-1-1区分大小写"><a href="#2-1-1区分大小写" class="headerlink" title="2.1.1区分大小写"></a>2.1.1区分大小写</h3><p>Javascript是区分大小写的语言。所有的关键字、变量、标识符、函数名都必须采取一致的大小写形式。</p><p>但注意：HTML并不区分大小写。</p><h3 id="2-1-2-空格、换行符、格式控制符"><a href="#2-1-2-空格、换行符、格式控制符" class="headerlink" title="2.1.2 空格、换行符、格式控制符"></a>2.1.2 空格、换行符、格式控制符</h3><p>Javascript会忽略程序中标识之间的空格。多数情况下也会忽略换行符。</p><h3 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-3-直接量"><a href="#2-3-直接量" class="headerlink" title="2.3 直接量"></a>2.3 直接量</h3><p>直接量就是程序中直接使用的数据值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> <span class="comment">//数字</span></span><br><span class="line"><span class="string">&quot;hello world&quot;</span><span class="comment">//字符串</span></span><br><span class="line"><span class="literal">true</span><span class="comment">//布尔值</span></span><br><span class="line">/<span class="title class_">JavaScript</span>/gi<span class="comment">//正则表达式直接量（用作模式匹配）</span></span><br><span class="line"><span class="literal">null</span><span class="comment">//空值</span></span><br><span class="line">&#123;<span class="attr">X</span>:<span class="number">1</span>,<span class="attr">Y</span>:<span class="number">2</span>&#125; <span class="comment">//对象</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">//数组</span></span><br></pre></td></tr></table></figure><h3 id="2-4-标识符和保留字"><a href="#2-4-标识符和保留字" class="headerlink" title="2.4 标识符和保留字"></a>2.4 标识符和保留字</h3><p>标识符就是一个名字，在程序中用于对变量和函数命名，或者用作Javascript代码中某些循环语句中跳转位置的标记。JavaScript中的标识符必须以字母、下划线、或$开始。</p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>JavaScript把一些标识符拿出来用作自己的关键字。这些关键字就是保留字，我们不能再在程序中把这些关键字用作标识符。</p><h3 id="2-5-可选的分号"><a href="#2-5-可选的分号" class="headerlink" title="2.5 可选的分号"></a>2.5 可选的分号</h3><p>JavaScript使用分号来将语句分隔开。如果语句独占一行，通常可以省略不写语句之间的分号。</p><p>需要注意JavaScript并不是在每个换行处添加分号，而是只有在缺少了分号就无法正确解析代码时，才会填补分号。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a</span><br><span class="line">=</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="comment">//以上代码会被解析为</span></span><br><span class="line"><span class="keyword">var</span> a; a=<span class="number">3</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>这是因为 var a; 可以被看做一条语句，但是var a a；不能，所以需要在a后面添加分号，随后 a&#x3D;3；可以被解析一条语句，但是 a&#x3D;3console.log(a)不能被解析为一条语句，所以会在a&#x3D;3后添加分号。即JavaScript只会在必要时添加分号。</p><p>通常来讲，如果一条语句以“（”、“【”、“&#x2F;”、“+”或“-”开始，那么它极有可能和前一条语句合在一起解析。有的程序员喜欢保守的在语句前加上一个分号，这样哪怕是之前的语句被修改了，分号被删除，但当前语句还是会被正确的解析。例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>                         <span class="comment">// 这里省略了分号</span></span><br><span class="line">;[x,x+<span class="number">1</span>,x+<span class="number">2</span>].<span class="title function_">forEach</span>(<span class="variable language_">console</span>.<span class="property">log</span>) <span class="comment">// 前面的分号保证了正确的解析语句</span></span><br></pre></td></tr></table></figure><p>通常来说，如果当前语句和下一句无法合并解析时，JavaScript会在第一行后填补分号，但是有三个例外。</p><p>第一个是在涉及return，break，continue语句时，如果这三个关键字紧跟着换行，那么JavaScript会在换行处填补分号，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line"><span class="comment">//javascript会将其解析为</span></span><br><span class="line"><span class="keyword">return</span>; <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//但是代码本意为：</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>也就是说在return，break，continue和随后的表达式之间不能又换行。</p><p>第二个例外是涉及“++”和“–”运算，这些运算符可以作为表达式的前缀运，也可以是作为表达式之后的后缀。如果要使用这些运算符中作为后缀运算符，则它们必须与应用它们的表达式出现在同一行。否则JavaScript会在行尾填补分号。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x</span><br><span class="line">++</span><br><span class="line">y</span><br><span class="line"><span class="comment">//这段代码会被JavaScript解析为</span></span><br><span class="line">x；</span><br><span class="line">++y；</span><br></pre></td></tr></table></figure><p>第三个异常涉及使用简洁的“箭头”的函数：&#x3D;&gt; 箭头本身必须与参数列表出现在同一行。</p><h1 id="类型、值和变量"><a href="#类型、值和变量" class="headerlink" title="类型、值和变量"></a>类型、值和变量</h1><h3 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h3><p>在编程语言中，能够表示并操作的的值的类型被称为数据类型。</p><p>Javascript的数据类型分为两类：基本类型（primitive type）和对象类型（Object type）。JavaScript的原始类型包括数字（Number），字符串（String）和布尔值（Boolean）</p><p>JavaScript中有两个特殊的原始值：null（空）和 undefined（未定义）。ES6 添加了一种新的特殊用途类型，称为 Symbol，它支持在不损害向后兼容性的情况下定义语言扩展。</p><p>任何不是数字、字符串、布尔值、Symbol、null 或 undefined 的 JavaScript 值都是对象。对象（即类型对象的成员）是属性的集合，其中每个属性都有一个名称和一个值（原始值或另一个对象）。</p><p>JavaScript定义了一种特殊的对象——数组。表示带有编号的有序集合。并且JavaScript为数组定义了专用的语法，使数组拥有和普通对象不同的特有行为特性。</p><p>JavaScript还定义了另一种特殊的对象——函数。函数是具有与它相关联的可执行代码的对象，通过调用函数来运行可执行代码，并返回运算结果。</p><p>如果函数用来初始化（使用new运算符）一个新建对象，我们称之为构造函数（constructor）每个构造函数定义了一类（class）对象——由构造函数初始化的对象组成的集合。类可以看作的对象的子类型。JavaScript 还定义了许多其他有用的对象类型。Set 对象表示一组值。Map 对象表示从键到值的映射。各种“类型化数组”类型促进了对字节数组和其他二进制数据的操作。正则类（RegExp） 定义了表示正则表达式。Date 类型定义了代表日期的对象。Error 及其子类型表示在执行 JavaScript 代码时可能出现的错误。</p><p>JavaScript解释器有着自己的内存管理机制，可以自动对内存进行垃圾回收（garbage collection）。当不再有任何引用指向一个对象，解释器就会知道这个对象已经没用了，然后会自动回收它所占用的内存资源。</p><p>JavaScript 是一种面向对象的语言。不严格地说，这意味着不是用全局定义的函数来操作各种类型的值，而是由类型本身定义处理值的方法。例如，要对数组 a 的元素进行排序，我们不需要将 a 传递给 sort() 函数。相反，我们调用 sort() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="title function_">sort</span>();<span class="comment">//sort(a)的面向对象版本</span></span><br></pre></td></tr></table></figure><p>从技术上讲，只有 JavaScript 对象才有方法。但是数字、字符串、布尔值和符号值的行为就好像它们有方法一样。在 JavaScript 中，只有 null 和 undefined 值不能调用方法。</p><p>JavaScript可以自由地进行数据类型的变换。例如，如果程序需要一个字符串，而您给了它一个数字，它会自动将数字转换为字符串。如果在需要布尔值的地方使用了非布尔值，JavaScript 将相应地进行转换。</p><p>常量和变量允许您在程序中使用名称来引用值。常量是用 const 声明的，变量是用 let 声明的（在旧的JavaScript代码中是用var声明的）。JavaScript 常量和变量都是无类型的：可以被赋予任何类型的值，同样一个变量也可以被重新赋予给不同类型的值。。</p><h3 id="3-2-Number"><a href="#3-2-Number" class="headerlink" title="3.2 Number"></a>3.2 Number</h3><p>JavaScript不区分整数值和浮点值。JavaScript中所有的数字均用浮点数值表示。</p><h3 id="3-2-1整型直接量"><a href="#3-2-1整型直接量" class="headerlink" title="3.2.1整型直接量"></a>3.2.1整型直接量</h3><p>在JavaScript中，用数字序列表示一个十进制的整数。例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1000000</span></span><br></pre></td></tr></table></figure><p>除了以 10 为基数的整数字面量之外，JavaScript 还可以识别十六进制（以 16 为基数）的值。以 0x 或 0x 开头的十六进制文字，后面跟着一串十六进制数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xff</span>       <span class="comment">// =&gt; 255: (15*16 + 15)</span></span><br><span class="line"><span class="number">0xBADCAFE</span>  <span class="comment">// =&gt; 195939070</span></span><br></pre></td></tr></table></figure><p>在 ES6 及后续版本中，还可以使用前缀 0b 和 0o（或0B和0O）来表示二进制（以 2 为基数）或八进制（以 8 为基数）的整数，而不是 0x：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b10101</span>  <span class="comment">// =&gt; 21:  (1*16 + 0*8 + 1*4 + 0*2 + 1*1)</span></span><br><span class="line"><span class="number">0o377</span>    <span class="comment">// =&gt; 255: (3*64 + 7*8 + 7*1)</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2浮点型直接量"><a href="#3-2-2浮点型直接量" class="headerlink" title="3.2.2浮点型直接量"></a>3.2.2浮点型直接量</h3><h3 id="3-2-3-JavaScript中的算术运算"><a href="#3-2-3-JavaScript中的算术运算" class="headerlink" title="3.2.3 JavaScript中的算术运算"></a>3.2.3 JavaScript中的算术运算</h3><p>JavaScript 程序使用算术运算符处理数字。这是语言提供的。这些参数包括 + 表示加法，- 表示减法，* 表示乘法，&#x2F; 表示除法，% 表示取模（除后的余数）。ES2016 为取幂添加了 **。</p><p>除了这些基本的算术运算符，JavaScript 还支持更加复杂的算术运算，这些复杂运算通过作为 Math 对象的属性定义的函数和常量来实现：</p><table>    <theade>        <th>方法</th>           <th>作用</th>        <th>结果</th>    </theade>    <tbody>        <tr>            <td>Math.pow(2，53)</td>            <td>求幂</td>            <td>9007199254740992 （2的53次幂）</td>        </tr>        <tr>            <td>Math.round(.6)</td>            <td>四舍五入</td>            <td>1</td>        </tr>        <tr>            <td>Math.ceil(1.1)</td>            <td>向上求整</td>            <td>2</td>        </tr>        <tr>            <td>Math.floor(1.1)</td>            <td>向下求整</td>            <td>1</td>        </tr>        <tr>            <td>Math.abs(-5)</td>            <td>求绝对值</td>            <td>5</td>        </tr>         <tr>            <td>Math.max(x,y,x)</td>            <td>返回最大值</td>            <td></td>        </tr>        <tr>            <td>Math.min(x,y,x)</td>            <td>返回最小值</td>            <td></td>        </tr>        <tr>            <td>Math.random()</td>            <td>生成一个大于等于0，小于1的伪随机数</td>            <td></td>        </tr>        <tr>            <td>Math.PI</td>            <td>圆周率</td>            <td>Π</td>        </tr>        <tr>            <td>Math.E</td>            <td>自然对数的底数</td>            <td>e</td>        </tr>        <tr>            <td>Math.sqrt(3)</td>            <td>求平方根</td>            <td>3的平方根</td>        </tr>        <tr>            <td>Math.pow(3)</td>            <td>求立方根</td>            <td>3的立方根</td>        </tr>     </tbody></table><p>JavaScript 中的算术在溢出、下溢或除以 0 的情况下不会引发错误。当数值操作的结果大于最大可表示数（溢出）时，结果是一个特殊的无穷值，即 Infinity。同样，当一个负数的绝对值大于最大可表示负数的绝对值时，结果是负无穷。</p><p>当数值操作的结果比最小的可表示数字更接近于零时，就会发生下溢。在这种情况下，JavaScript 返回 0。如果下溢发生在负数，JavaScript 将返回一个特殊的值，称为“负零”。这个值与普通的 0 几乎没有区别，</p><p>在 JavaScript 中除以 0 不会报错：它只是返回无穷大或负无穷大。然而，有一个例外：0 除以 0 没有一个定义良好的值，这个操作的结果是一个特殊的非数字值 NaN。</p><p>JavaScript 预先定义了全局常量 Infinity 和 NaN 来保存正的无穷大和非数值，这些值也可以作为 Number 对象的属性：NaN在 JavaScript 中有一个不同寻常的特性：它不等于任何其他值，包括它自己。这意味着我们不能写x &#x3D; NaN来判断变量x的值是否为NaN。我们必须写为x！&#x3D; x或Number.isNaN（x）。当且仅当x与全局常量NaN具有相同的值时，这些表达式为真。</p><p>全局函数 isNaN() 类似于 Number.isNaN()。如果它的实参是 NaN，或者该实参是一个不能转换为数字的非数字值，则返回 true。</p><h3 id="3-2-4-二进制浮点数和四舍五入错误"><a href="#3-2-4-二进制浮点数和四舍五入错误" class="headerlink" title="3.2.4 二进制浮点数和四舍五入错误"></a>3.2.4 二进制浮点数和四舍五入错误</h3><p>JavaScript 数字有足够的精度，可以非常接近 0.1。但这个数字不能准确地表示，这可能会导致问题。考虑这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">.3</span> -<span class="number">.2</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">.2</span> - <span class="number">.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x == y);    <span class="comment">//false     </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x==<span class="number">.1</span>);     <span class="comment">//false     0.3-0.2不等于0.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y==<span class="number">.1</span>);     <span class="comment">//true    </span></span><br></pre></td></tr></table></figure><p>由于舍入误差，0.3 和 0.2 的近似值与0 .2 和0 .1 的近似值之间的差并不完全相同。另外，请注意，这里显示的代码中的值 x 和 y 非常接近，也非常接近正确的值。计算的值几乎适用于任何目的；只有当我们试图比较平等的价值时，问题才会出现。</p><p>如果这些浮点使的程序出现问题时，请考虑使用缩放整数。例如，您可以将货币值转为整数美分，而不是小数美元。</p><h3 id="3-2-5-Biglnt"><a href="#3-2-5-Biglnt" class="headerlink" title="3.2.5 Biglnt"></a>3.2.5 Biglnt</h3><p>在 ES2020 中定义的 JavaScript 最新特性之一是一种名为 BigInt 的新数字类型。BigInt 是一种数值类型，其值为整数。该类型添加到 JavaScript 主要是为了支持 64 位整数的表示。</p><p>Bigint 字面量以数字字符串编写，后跟小写字母 n。默认情况下，它是 10 进制的，但您可以将 0b、0o 和 0x 前缀用于二进制、八进制和十六进制 BigInts：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234n</span>                <span class="comment">// A not-so-big BigInt literal</span></span><br><span class="line"><span class="number">0b111111n</span>            <span class="comment">// A binary BigInt</span></span><br><span class="line"><span class="number">0o7777n</span>              <span class="comment">// An octal BigInt</span></span><br><span class="line"><span class="number">0x8000000000000000n</span>  <span class="comment">// =&gt; 2n**63n: A 64-bit integer</span></span><br></pre></td></tr></table></figure><p>你可以使用 BigInt() 作为函数，将普通的 JavaScript 数字或字符串转换为 BigInt 值:</p><p>使用 BigInt 值的算术运算与使用常规 JavaScript 数字的算术运算类似，只不过除法会去掉任何余数（归 0）:</p><h3 id="3-2-6-日期和时间"><a href="#3-2-6-日期和时间" class="headerlink" title="3.2.6 日期和时间"></a>3.2.6 日期和时间</h3><p>JavaScript 定义了一个简单的 Date 类，用于表示和操作表示日期和时间的数字。JavaScript 的日期是对象，但它们也有一个数字表示形式的时间戳，指定了自1970年1月1日以来经过的毫秒数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();  <span class="comment">// 时间戳形式的当前时间（一个数字）.</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();        <span class="comment">// 作为Date对象的当前时间。</span></span><br><span class="line"><span class="keyword">let</span> ms = now.<span class="title function_">getTime</span>();      <span class="comment">// 转换为毫秒时间戳。</span></span><br><span class="line"><span class="keyword">let</span> iso = now.<span class="title function_">toISOString</span>(); <span class="comment">// 转换为标准格式的字符串。//世界标准时间，即零时区的时间</span></span><br></pre></td></tr></table></figure><h3 id="3-3-文本"><a href="#3-3-文本" class="headerlink" title="3.3 文本"></a>3.3 文本</h3><p>表示文本的 JavaScript 类型是字符串。字符串是由 16 位值组成的不可变有序序列，每个值通常代表一个 Unicode 字符。</p><h3 id="3-3-1-字符串直接量"><a href="#3-3-1-字符串直接量" class="headerlink" title="3.3.1 字符串直接量"></a>3.3.1 字符串直接量</h3><p>字符串直接量是由单引号或者双引号括起来的字符序列。单引号内可以包含双引号，双引号内也可以包含单引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="comment">//空字符串，它包含0个字符</span></span><br><span class="line"><span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="string">&quot;3.14&quot;</span></span><br><span class="line"><span class="string">&quot;name=&#x27;myform&#x27;&quot;</span></span><br><span class="line"><span class="string">&#x27;this string\nhas tow lines&#x27;</span></span><br><span class="line"><span class="string">`&quot;She said &#x27;hi&#x27;&quot;, he said.`</span></span><br></pre></td></tr></table></figure><p>用反引号包含的字符串是 ES6 的一个特性，它允许 JavaScript 表达式嵌入（或插入）字符串字面量。这种表达式插值语法在 §3.3.4 中介绍。</p><p>在 ES5 中，您可以通过在每行末尾使用反斜杠（\）来将字符串分隔成多行。反斜杠及其后面的行结束符都不是字符串字面值的一部分。ES6 反引号语法允许字符串跨多行分割，在这种情况下，行结束符是字符串字面值的一部分</p><h3 id="3-3-2-转义字符"><a href="#3-3-2-转义字符" class="headerlink" title="3.3.2 转义字符"></a>3.3.2 转义字符</h3><table>    <thead>        <th>转义字符</th>        <th>含义</th>    </thead>    <tbody>        <tr>            <td>\o</td>            <td>NUL字符（\u0000）</td>        </tr>        <tr>            <td>\b</td>            <td>退格符（\u0008）</td>        </tr>        <tr>            <td>\t</td>            <td>水平制表符（\u0009）</td>        </tr>        <tr>            <td>\n</td>            <td>换行符（\u000A）</td>        </tr>        <tr>            <td>\v</td>            <td>垂直制表符（\u000B）</td>        </tr>        <tr>            <td>\f</td>            <td>换页符（\u000C）</td>        </tr>        <tr>            <td>\r</td>            <td>回车符（\u000D）</td>        </tr>        <tr>            <td>\"</td>            <td>双引号（\u0022）</td>        </tr>        <tr>            <td>\'</td>            <td>撇号或单引号（\u0027）</td>        </tr>        <tr>            <td>\\</td>            <td>反斜线（\u005C）</td>        </tr>    </tbody></table><h3 id="3-3-3字符串的使用"><a href="#3-3-3字符串的使用" class="headerlink" title="3.3.3字符串的使用"></a>3.3.3字符串的使用</h3><p>JavaScript中可以使用”+”拼接字符串，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot;hello &quot;</span> + <span class="string">&quot;world&quot;</span><span class="comment">//生成字符串 &quot;hello world&quot;</span></span><br><span class="line">gretting = <span class="string">&quot;Welcome to my blog,&quot;</span>+<span class="string">&quot; &quot;</span>+name;</span><br></pre></td></tr></table></figure><p>可以使用字符串的length属性来得到字符串的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">msg.<span class="property">length</span></span><br></pre></td></tr></table></figure><p>除了这个 length 属性，JavaScript 还提供了一个丰富的 API 来处理字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello, world&quot;</span> <span class="comment">//定义一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// charAt()  用于返回指定索引处的字符。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>)); <span class="comment">// =&gt; e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// substring() </span></span><br><span class="line"><span class="comment">//用于提取字符串中介于两个指定下标之间的字符。</span></span><br><span class="line"><span class="comment">// 方法返回的子串包括开始处的字符，但不包括结束处的字符。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">4</span>)); <span class="comment">// =&gt; ell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*slice(start, end) 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</span></span><br><span class="line"><span class="comment"> *使用 start（包含） 和 end（不包含） 参数来指定字符串提取的部分。</span></span><br><span class="line"><span class="comment"> *如果是负数表示从尾部截取多少个字符串，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</span></span><br><span class="line"><span class="comment"> *end 参数如果为负数，-1 指字符串的最后一个字符的位置，-2 指倒数第二个字符，以此类推。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>)); <span class="comment">// =&gt; ell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//indexOf(&quot;l&quot;)  返回字符第一次出现的位置的索引，</span></span><br><span class="line"><span class="comment">//lastIndexOf(&quot;l&quot;) 返回字符最后一次出现位置的索引</span></span><br><span class="line"><span class="comment">//字符串中若没有出现该字符，则返回 -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;l&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;l&quot;</span>));</span><br><span class="line"><span class="comment">//第二个参数为开始检索的位置，一样是返回第一次检索到的位置的索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;l&quot;</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//split(separator,limit) 方法用于把一个字符串分割成字符串数组。</span></span><br><span class="line"><span class="comment">// separator可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</span></span><br><span class="line"><span class="comment">//  limit可选。该参数可指定返回的数组的最大长度。</span></span><br><span class="line"><span class="comment">//如果设置了该参数，返回的子串不会多于这个参数指定的数组。</span></span><br><span class="line"><span class="comment">//如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示： 如果把空字符串 (&quot;&quot;) 用作分隔符，那么字符串中的每个字符之间都会被分割。</span></span><br><span class="line"><span class="comment">// 注意： split() 方法不改变原始字符串。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;H&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//toUpperCase() 将字符串中所有字符改为大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>());</span><br></pre></td></tr></table></figure><p>字符串在 JavaScript 中是不可变的。 像 replace() 和 toUpperCase() 这样的方法是返回新的字符串：它们不会修改原字符串。</p><p>字符串也可以被视为只读数组，您可以使用方括号而不是 charAt（） 方法访问字符串中的单个字符（16 位值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">s[<span class="number">0</span>]                  <span class="comment">// =&gt; &quot;h&quot;</span></span><br><span class="line">s[s.<span class="property">length</span>-<span class="number">1</span>]         <span class="comment">// =&gt; &quot;d&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-4-模板字符"><a href="#3-3-4-模板字符" class="headerlink" title="3.3.4 模板字符"></a>3.3.4 模板字符</h3><p>在 ES6 及更高版本中，字符串文字可以用反引号分隔</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">`hello world`</span></span><br></pre></td></tr></table></figure><p>但是，这不仅仅是另一种字符串文本语法，因为这些模板文本可以包含任意 JavaScript 表达式。反引号中字符串文本的最终值是通过计算任何包含的表达式，将这些表达式的值转换为字符串并将这些计算字符串与反引号中的文本字符组合来计算的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> greeting = <span class="string">`Hello <span class="subst">$&#123; name &#125;</span>.`</span>;  <span class="comment">// greeting == &quot;Hello Bill.&quot;</span></span><br></pre></td></tr></table></figure><p>${ }  之间的所有内容都被解释为 JavaScript 表达式。 大括号之外的都是普通的字符串文本。括号内的表达式被求值，然后转换为字符串并插入到模板中，替换 ${} 之间的所有内容。</p><p>模板文本可以包含任意数量的表达式。它可以使用普通字符串可以使用的任何转义字符，并且可以跨越任意数量的行，而无需特殊的转义。</p><p>模板文本的一个强大但不太常用的功能是，如果函数名称（或“标记”）紧挨着开反引号，则模板文本中的文本和表达式值将传递给函数。此“标记模板文本”的值是函数的返回值。</p><h3 id="3-3-5-模式匹配"><a href="#3-3-5-模式匹配" class="headerlink" title="3.3.5 模式匹配"></a>3.3.5 模式匹配</h3><p>JavaScript定义了RegExp()构造函数，用来创建表示文本匹配模式的对象，即正则表达式。</p><p>尽管RegExp()并不是语言中的基本数据类型，但是他们依然有直接量写法，一对斜杠之间的文本构成了正则表达式字面量。 对中的第二个斜杠还可以后跟一个或多个字母，它们修改了模式的含义。 例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="variable constant_">HTML</span>/;             <span class="comment">// Match the letters H T M L at the start of a string</span></span><br><span class="line"><span class="regexp">/[1-9][0-9]*/</span>;       <span class="comment">// Match a nonzero digit, followed by any # of digits</span></span><br><span class="line"><span class="regexp">/\bjavascript\b/i</span>;   <span class="comment">// Match &quot;javascript&quot; as a word, case-insensitive</span></span><br></pre></td></tr></table></figure><h3 id="3-4-布尔值"><a href="#3-4-布尔值" class="headerlink" title="3.4 布尔值"></a>3.4 布尔值</h3><p>布尔值表示真假、开或关、是或否。此类型只有两个可能的值。保留字 true 和 false 的计算结果为这两个值。</p><p>任何 JavaScript 值都可以转换为布尔值。以下值转换为 false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">null</span><br><span class="line">0</span><br><span class="line">-0</span><br><span class="line">NaN</span><br><span class="line">&quot;&quot;  // 空串</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;&amp; =&gt; and(与)</span></span><br><span class="line"><span class="comment">|| =&gt; or(或)</span></span><br><span class="line"><span class="comment">!  =&gt; not(非)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> ((x === <span class="number">0</span> &amp;&amp; y === <span class="number">0</span>) || !(z === <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">// x和y均为零或z不为零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-null和undefined"><a href="#3-5-null和undefined" class="headerlink" title="3.5 null和undefined"></a>3.5 null和undefined</h3><p>null 是一个JavaScript关键字，其表示为一个特殊值，该值通常用于表示“空”。对 null 使用 typeof 运算符返回字符串“object”，也就是说可以将null认为是一个特殊的对象，实际上，通常认为null是它自有类型的唯一一个成员。</p><p>undefined 值代表一种更深层次的“空值”。它表示变量没有初始化，查询不存在的对象属性或数组元素的值时也会返回undefined。undefined 是一个预定义的全局常量（不是像 null 这样的语言关键字，虽然这在实践中不是一个重要的区别），它被初始化为 undefined 值。如果对未定义的值应用 typeof 运算符，它将返回“undefined”，表明该值是特殊类型的唯一成员。</p><p>尽管存在这些差异，null 和 undefined 都表示没有值，相等运算符 &#x3D;&#x3D; 认为它们相等。（使用严格的相等运算符 &#x3D;&#x3D;&#x3D; 来区分它们。）两者在转换为布尔值是都为false</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript，前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四月末尾的夜晚</title>
      <link href="/2023/04/29/%E5%9B%9B%E6%9C%88%E6%9C%AB%E5%B0%BE%E7%9A%84%E5%A4%9C%E6%99%9A/"/>
      <url>/2023/04/29/%E5%9B%9B%E6%9C%88%E6%9C%AB%E5%B0%BE%E7%9A%84%E5%A4%9C%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="四月末尾的夜晚"><a href="#四月末尾的夜晚" class="headerlink" title="四月末尾的夜晚"></a>四月末尾的夜晚</h3><br><p>月亮似乎并不明亮</p><p>远处彻夜的亮着的路灯是城市的光明</p><p>是别人的夜晚</p><p>我的内心只有月亮，月亮就要熄灭<br><br></p><p>悔恨的泪水流出来</p><p>流满了整个湖泊</p><p>内心的恐惧也如深渊一般</p><p>无法跨越<br><br></p><p>四月就这样到来又离去</p><p>未知的五月伸出利爪抓挠着我内心的防线</p><p>不如死在四月的末尾</p><p>就死在春天的尾巴上面</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 四月 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考公日记</title>
      <link href="/2023/04/12/%E8%80%83%E5%85%AC%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/04/12/%E8%80%83%E5%85%AC%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="考公日记"><a href="#考公日记" class="headerlink" title="考公日记"></a>考公日记</h2><h3 id="意外进面"><a href="#意外进面" class="headerlink" title="意外进面"></a>意外进面</h3><p>&ensp;&ensp;&ensp;&ensp;说实话，对于省考进面试的这个结果我是挺意外的。我看到这个消息的时候还在我妈妈工作的那个工厂里工作——听我的老板跟我讲一些我认为没有营养的一些话。当然我认为我这个老板还是不错的。似乎当你不把一件事情放在心上，当你以为它已经失败了的时候，它好像总是能成功。反过来好像也是这样，当你把一件事放在心上，并全力以赴时，事情总难以得到让人满意的结果。命运好像总是这样捉弄人。</p><p>&ensp;&ensp;&ensp;&ensp;当时由于各种原因，其实并没有为省考准备太多，以至于我都打算在我妈妈的那个工厂里先混到毕业，等拿到毕业证再谋求一份好一点的工作，可是老天似乎想要给我一点机会，一点点幸运，看我是否能把握住。看到这个消息的时候，内心还是蛮兴奋的，觉得自己的考公之路又有了着落。我的笔试成绩并不算高，说到底还是幸运。另一个同为应届岗的岗位有三个七十多分的大佬，我在那个岗位可能要排到第十左右了。我还是幸运的，第一次考试就进面了。</p><h3 id="报班前夕"><a href="#报班前夕" class="headerlink" title="报班前夕"></a>报班前夕</h3><p>&ensp;&ensp;&ensp;&ensp;查分过后，我在华图的一个小程序上晒了分数，当时在那个名单排第四，我心里觉得这还挺高的。当排名出来后，第八。我还是数错了，去跟人家说我的情况是招五排七。 😢 总之是进面了，跟第五名也是只差0.9分。当时很多华图的老师给我打电话，但那时还是很犹豫，一是太贵了，二是对自己的怀疑。</p><p>&ensp;&ensp;&ensp;&ensp;面对多种情况，对于一仁教育和华图我最终选择了华图。从众心理作祟，以及自己的小算盘——考不上一分钱不拿。对于乡镇岗位，拿成绩来看，一仁教育确实比华图的数据更加好看，同时一仁教育也更加便宜。</p><h3 id="线下面试班"><a href="#线下面试班" class="headerlink" title="线下面试班"></a>线下面试班</h3><p>&ensp;&ensp;&ensp;&ensp;线下面试班说实话也有点辛苦，每天要从早上七点半到晚上的十点半左右，高中过后再没有体验过的早读又享受到了。每天都很困，面试班的内容也听得不是很明白，一知半解的，就开始模拟训练。每天都会很疑惑，今天到底学了啥，也不知道自己是不是学明白了。当然最后的面试也算告诉我了答案。我也不能说是不努力吧，当然可能确实没尽全力。</p><p>&ensp;&ensp;&ensp;&ensp;线下面试班里的同学确实都很厉害，首先对我的打击可能就是在学历上，大家都是乡镇岗位，我一个大专生，不说里面大都是本科生，甚至研究生去报乡镇岗位是我不能理解的，这也让我深刻体会到了考公如此之卷。我一直认为学历是能力的一种体现。大家一般学校越好的学习能力也越强，理解能力也越强。其实他们中有些人有丰富的阅历，丰富的人生经验让他们在面对同一道面试题中有更多的切实可行的方案，有些人有良好的学习和记忆能力，之前对申论的刻苦学习使得他们在面对同一道面试题中更加从容，好像只有自己是纯靠运气走到了这里。</p><h3 id="面试失败"><a href="#面试失败" class="headerlink" title="面试失败"></a>面试失败</h3><p>&ensp;&ensp;&ensp;&ensp;我的面试时间是9号，也不知道是运气好还是不好，当时一方面想着7号面试，早日结束痛苦，但是又想着再慢些，再多给自己一些时间练习。面试前华图给我们找个两个经验丰富的考官。第二个考官反复提及<strong>大兴调研之风</strong>,<strong>大田变小田</strong>，我虽然注意了，但没有放在心上。全真模拟时两位老师给我打的分数都在74分左右，最后我也真的只考了73.8分。<br></p><h3 id="以后"><a href="#以后" class="headerlink" title="以后"></a>以后</h3><p>&ensp;&ensp;&ensp;&ensp;<strong>路漫漫其修远兮，吾将上下而求索</strong></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 考公 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytho爬虫—urllib</title>
      <link href="/2023/03/14/pytho%E7%88%AC%E8%99%AB%E2%80%94urllib/"/>
      <url>/2023/03/14/pytho%E7%88%AC%E8%99%AB%E2%80%94urllib/</url>
      
        <content type="html"><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="一、urllib库的基本使用"><a href="#一、urllib库的基本使用" class="headerlink" title="一、urllib库的基本使用"></a>一、urllib库的基本使用</h2><pre><code>urllib.request.urlopen() 模拟浏览器向服务器发送请求   response    服务器返回的数据        response的数据类型是HttpResponse            字节‐‐&gt;字符串                解码 decode                    字符串‐‐&gt;字节                编码 encoderead()       字节形式读取二进制网页源码   扩展：rede(5)返回前几个字节        readline()   读取一行        readlines()  一行一行读取 直至结束        getcode()    获取状态码        geturl()     获取url        getheaders() 获取headersurllib.request.urlretrieve()        请求网页            请求图片            请求视频</code></pre><h2 id="Urllib库的基本使用——获取百度一下的页面源码"><a href="#Urllib库的基本使用——获取百度一下的页面源码" class="headerlink" title="Urllib库的基本使用——获取百度一下的页面源码"></a>Urllib库的基本使用——获取百度一下的页面源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入urllib库</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义url</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器访问，获取响应数据</span></span><br><span class="line">response = urllib.request.urlopen(url=url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="comment"># 由于response返回的数据是二进制的字节，所以对其进行解码</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="二、请求对象的定制"><a href="#二、请求对象的定制" class="headerlink" title="二、请求对象的定制"></a>二、请求对象的定制</h2><p>UA介绍：User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统<br>及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等</p><pre><code>语法：request = urllib.request.Request()</code></pre><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><h3 id="1-get请求"><a href="#1-get请求" class="headerlink" title="1.get请求"></a>1.get请求</h3><h4 id="urllib-parse-quote（）"><a href="#urllib-parse-quote（）" class="headerlink" title="urllib.parse.quote（）"></a>urllib.parse.quote（）</h4><p>eg:使用百度搜索周杰伦<br><br>获取    <a href="https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6">https://www.baidu.com/s?wd=周杰伦</a>  的网页源码,由于周杰伦三个为汉字，所以需要对其进行编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入所需库</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义url</span></span><br><span class="line">base_url = <span class="string">&#x27;url = &#x27;</span>https://www.baidu.com/s?wd=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖urllib.parse，将周杰伦三个汉字转换为Unicode编码</span></span><br><span class="line">name = urllib.parse.quote(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组成完整的url</span></span><br><span class="line">url += name</span><br><span class="line">    </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 定制请求对象</span></span><br><span class="line">request = urllib.request.Request(url, <span class="literal">None</span>, headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取响应</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h4 id="urllib-parse-urlencode-字典对象"><a href="#urllib-parse-urlencode-字典对象" class="headerlink" title="urllib.parse.urlencode(字典对象)"></a>urllib.parse.urlencode(字典对象)</h4><p>urllib.parse.urlencode(字典对象)，将字典的每一个元素转换为unicode编码，并用&amp;将每一个元素进行相连</p><p>eg: <a href="https://www.baidu.com/s?wd=%E5%91%A8%E6%9D%B0%E4%BC%A6&sex=%E7%94%B7">https://www.baidu.com/s?wd=周杰伦&amp;sex=男</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;中国台湾省&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">keyword = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求资源路径</span></span><br><span class="line">url = base_url + keyword</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 定制请求 对象</span></span><br><span class="line">request = urllib.request.Request(url, <span class="literal">None</span>, headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"><span class="comment"># 获取网页源码数据</span></span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="爬取百度翻译结果（post请求）"><a href="#爬取百度翻译结果（post请求）" class="headerlink" title="爬取百度翻译结果（post请求）"></a>爬取百度翻译结果（post请求）</h2><p>使用python代码爬取百度翻译的简单结果<br>    : 首先要引入所需的库，urllib<br>    : 在百度翻译的网页中找到请求数据的网址为：<a href="https://fanyi.baidu.com/sug">https://fanyi.baidu.com/sug</a><br>    : 查看负载的数据，写入data中<br>    : 对于post请求必须进行编码，编码过后要记得解码<br>    : 随后利用urllib.request.Request() 定制响应请求头<br>    : 之后模拟在浏览器中访问，获取响应，读取响应<br>    : 由于读取的内容为文本数据，但是原内容为json数据，所以未正确显示，引入json库，将其转为json数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入库</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础路径</span></span><br><span class="line">base_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: <span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># data中的数据可以替换为用户输入的数据</span></span><br><span class="line">data[<span class="string">&#x27;kw&#x27;</span>] = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的英文单词：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 请求必须编码，编码后需要解码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=base_url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取响应内容</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串 ---&gt; json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">obj = json.loads(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取响应内容</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> python爬虫 </category>
          
          <category> urllib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在深夜的火车上</title>
      <link href="/2023/03/11/%E5%9C%A8%E6%B7%B1%E5%A4%9C%E7%9A%84%E7%81%AB%E8%BD%A6%E4%B8%8A/"/>
      <url>/2023/03/11/%E5%9C%A8%E6%B7%B1%E5%A4%9C%E7%9A%84%E7%81%AB%E8%BD%A6%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>下午四五点钟，我动身从家前往南京，一是跟姐姐们玩耍，二是为了我的工作。<br>关于工作我总是矛盾且犹豫。我找不到我心仪的工作，有不愿意去厂区打螺丝获取饭店端盘子。</p><blockquote><p>“如果我没上大学就好了，就可以心安理得去当服务员，可是我上了大学拉不下脸。”<br>“如果我没上大学，就可以找一位没有学历门槛的工作，不用现在这样进退两难。”<br>“我真的很想当美甲师，可我都读到硕士了，家里人肯定接受不了。”</p></blockquote><p>这是上海外国语大学一位硕士的演讲，我们都自然而然的带入，抖音上也掀起来一股“孔乙已文学”。我也是自然将我自己代入了进去的。可我并不如孔乙已，孔乙已知道茴字有四种写法。但我由于我现在的处境，我同样开始怀疑我自己。如果我没有读书，我真的可以心安理得的去打螺丝，去做服务员。可我读了三年大学，虽然我觉得读这个学校是个错误的决定，但我依旧觉得我读了三年大学，应该去做一份看起来比较体面的工作。<br>并不是我脱不下所谓什么孔乙已的长衫，我在合肥找工作时我面试了两家客服，都拒绝了我。对此我并不是很能理解，我不明白做一个客服的技术含量在哪？难道我不如一个高中生吗？那之前我就早已经开始怀疑自己。我觉得似乎我高考过后做的每一个决定都是错的。我看着周围的同学好像都在往前走，只有我在原地踏步。加上我现在没有工作，我每天都很拧巴。我也想过去做一些下力气的活，但我又想再等等。等我公务员考试成绩下来，等我考完事业单位联考……<br>我总是如此，犹豫不决，没有主见。有点烂，不，简直烂透了。自己还以为自己多厉害多厉害，看不起周遭所有人。觉得这个不知进取，自甘堕落，觉得那个曲意逢迎，阿谀奉承，还觉得他们满嘴谎言，道德低下。可是当这些劣根展现到你身上时你为什么没有察觉呢？假清高，装深沉！<br>这列火车向前开，中转南京。你往哪走，在哪中转，在哪到达终点？</p><blockquote><p>要紧的是果敢地迈出第一步，对与错先都不管，自古就没有把一切都设计好再开步的事</p></blockquote><p>鲁莽者要学会思考，善思者要克服犹豫。我总是矛盾，犹豫不决，拿不定主意。我想我这样的人别说是什么大事了，也许现在连小事情做起来也开始费劲了。然而还是要迈出第一步，勇敢的迈出第一步，我不能不能在原地等死。无论我要参加事业单位联考，还是继续找工作，我都要开始迈出这一步了，我不能再停留在原地。</p><blockquote><p>春风得意马蹄疾，一日看尽长安花</p></blockquote><p>望诸君顺遂，勇敢踏出心中的那一步。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2023/03/09/HelloWorld/"/>
      <url>/2023/03/09/HelloWorld/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
